# This Docker Compose file can be used to quickly bootup Dgraph Zero
# and Alpha in different Docker containers.

# It mounts /tmp/data on the host machine to /dgraph within the
# container. You can change /tmp/data to a more appropriate location.
# Run `docker-compose up` to start Dgraph.

version: "3.2"

services:
  traefik:
    image: "traefik:v2.6"
    command:
      - "--entrypoints.gateway.address=:4000" #Declares the web-secure entrypoint in Traefik
      - "--entrypoints.alpha.address=:8080" #Declares the web-secure entrypoint in Traefik
      - "--entrypoints.admin.address=:443" #Declares the web-secure entrypoint in Traefik
      - "--entrypoints.web.address=:80"
      - "--entrypoints.api.address=:4100"
      - "--entrypoints.wss.address=:8084"
      - "--providers.docker=true"
      - "--api=true"
      - "--log.level=DEBUG"
      - "--certificatesresolvers.le.acme.email=my@email.com"
      - "--certificatesresolvers.le.acme.storage=/acme.json"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
    ports:
      - "4000:4000" # Graphql Gateway port
      - "8080:8080" # Dgraph API Port
      - "8084:8084" # MQTT wss port
      - "4100:4100"
      - "443:443" #Docker sends requests on port 443 to Traefik on port 443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.http.routers.api.entrypoints=api"
      - "traefik.http.routers.api.rule=Host(`sapp00332.eu.aws.rccad.net`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.middlewares.mw-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST"
      - "traefik.http.middlewares.mw-cors.headers.accesscontrolalloworiginlist=https://sapp00332.eu.aws.rccad.net"
      - "traefik.http.middlewares.mw-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.mw-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.mw-cors.headers.addvaryheader=true"

  zero:
    image: dgraph/dgraph:v21.03.2
    volumes:
      - ./zero/data:/dgraph
    ports:
      - 5080:5080
      - 6080:6080
    restart: on-failure
    command: dgraph zero --my=zero:5080
    container_name: zero
  alpha:
    labels:
      - "traefik.http.routers.alpha.entrypoints=alpha"
      - "traefik.http.routers.alpha.rule=Host(`sapp00332.eu.aws.rccad.net`)"
      - "traefik.http.routers.alpha.tls=true"
      - "traefik.http.services.aplha.loadbalancer.server.port=8080"
      - "traefik.http.routers.alpha.middlewares=mw-cors"
      - "traefik.http.routers.alpha.tls.certresolver=le"
    image: dgraph/dgraph:v21.03.2
    volumes:
      - ./alpha/data:/dgraph
#    ports:
#      - 8080:8080
#      - 9080:9080
#    env_file:
#      - ACCESS_KEYS.txt
    restart: on-failure
    command: dgraph alpha --my=alpha:7080 --zero=zero:5080  --security whitelist=0.0.0.0/0
    container_name: alpha
    healthcheck:
      interval: 5s
      timeout: 3s
      retries: 5
      test: ["CMD", "curl", "-f", "http://alpha:8080/admin"]
  ratel:
    image: dgraph/dgraph:v20.11.3
    ports:
      - 8000:8000
    command: dgraph-ratel
  libre-ui:
    labels:
      - "traefik.http.routers.admin.entrypoints=admin"
      - "traefik.http.routers.admin.rule=Host(`sapp00332.eu.aws.rccad.net`)"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.services.admin.loadbalancer.server.port=80"
      - "traefik.http.routers.admin.middlewares=mw-cors"
      - "traefik.http.routers.admin.tls.certresolver=le"
    container_name: libre-ui
    image:  ghcr.io/spruik/libre-admin-ui:v0.4.0
    environment:
      - AUTH0_DOMAIN=demo-libremfg.us.auth0.com
      - AUTH0_CLIENT_ID=cEye379jRD9TCroW6LRwsNf7LQkMYOBj
      - GRAPHQL_ENDPOINT=https://sapp00332.eu.aws.rccad.net:4000/graphql
      - GRAPHQL_SUBSCRIPTION_ENDPOINT=wss://sapp00332.eu.aws.rccad.net:8080/graphql
      - MQTT_USERNAME=admin
      - MQTT_PASSWORD=public
      - MQTT_URL=sapp00332.eu.aws.rccad.net
      - MQTT_PORT=8084
#    ports:
#      - 80:80
    depends_on:
      - "influxdb"
      - "mqtt"
      - "alpha"
      - "zero"
  mqtt:
    image:  emqx/emqx:4.3.8
    labels:
      - "traefik.http.routers.mqtts.entrypoints=wss"
      - "traefik.http.routers.mqtts.rule=Host(`sapp00332.eu.aws.rccad.net`)"
      - "traefik.http.routers.mqtts.tls=true"
      - "traefik.http.services.mqtts.loadbalancer.server.port=8083"
      - "traefik.http.routers.mqtts.middlewares=mw-cors"
      - "traefik.http.routers.mqtts.tls.certresolver=le"
    ports:
      - 1883:1883
      - 8083:8083
      - 18083:18083
    restart: always
    environment:
      - EMQX_LOADED_PLUGINS=emqx_recon,emqx_retainer,emqx_management,emqx_dashboard,emqx_auth_mnesia
      - EMQX_ALLOW_ANONYMOUS=true
      - EMQX_ACL_NOMATCH=allow
      - EMQX_BRIDGE__MQTT__AWS__START_TYPE=auto
      - EMQX_BRIDGE__MQTT__AWS__ADDRESS=10.145.4.40:1883 # docker-ip:port of mqtt-cloud
      - EMQX_BRIDGE__MQTT__AWS__PROTO_VER=mqttv3
      - EMQX_BRIDGE__MQTT__AWS__BRIDGE_MODE=true
      - EMQX_BRIDGE__MQTT__AWS__CLEAN_START=true
      - EMQX_BRIDGE__MQTT__AWS__USERNAME=user
      - EMQX_BRIDGE__MQTT__AWS__PASSWORD=passw
      - EMQX_BRIDGE__MQTT__AWS__CLIENTID=bridge_libre
      - EMQX_BRIDGE__MQTT__AWS__KEEPALIVE=300s
      - EMQX_BRIDGE__MQTT__AWS__RECONNECT_INTERVAL=30s
      - EMQX_BRIDGE__MQTT__AWS__FORWARD_MOUNTPOINT=bridge/libre/
      - EMQX_BRIDGE__MQTT__AWS__FORWARDS=Libre/#,Couvet/#
      - EMQX_BRIDGE__MQTT__AWS__SUBSCRIPTION_1_TOPIC=LibreSubscription/#
      - EMQX_BRIDGE__MQTT__AWS__SUBSCRIPTION_1_QOS=1
    container_name: mqtt
    healthcheck:
      interval: 5s
      timeout: 3s
      retries: 5
      test: ["CMD", "curl", "-f", "http://mqtt:18083"]
  libre-core:
    image: ghcr.io/spruik/libre-core:0.5.0
    restart: always
    ports:
      - 4002:4002
    environment:
      - LIBRE_CONFIG_FILE=/etc/config/config.json
    volumes:
      - ./libre-core/config:/etc/config
    depends_on:
      - "influxdb"
      - "mqtt"
      - "zero"
      - "dgraph-init"
    container_name: libre-core
  libre-wms:
    image: ghcr.io/spruik/libre-wms:0.0.1
    restart: always
    ports:
      - 7000:7000
    environment:
      - LIBRE_CONFIG_FILE=/etc/config/config.json
    volumes:
      - ./libre-wms/config:/etc/config
    depends_on:
      - "influxdb"
      - "mqtt"
      - "alpha"
      - "dgraph-init"
    container_name: libre-wms
  graphql-pubsub:
    image: ghcr.io/spruik/graphql-pubsub:0.0.5
    restart: always
    environment:
      - LIBRE_CONFIG_FILE=/etc/config/config.json
    volumes:
      - ./graphql-pubsub/config:/etc/config
    depends_on:
      alpha:
        condition: service_healthy
      mqtt:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    container_name: graphql-pubsub
  libre-workflow-pubsub:
    image: ghcr.io/spruik/libre-workflow-pubsub:0.0.7
    restart: always
    environment:
      - LIBRE_CONFIG_FILE=/etc/config/config.json
    volumes:
      - ./libre-workflow-pubsub/config:/etc/config
    depends_on:
      alpha:
        condition: service_healthy
      mqtt:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    container_name: libre-workflow-pubsub
  influxdb:
    image: influxdb:2.0.7
    volumes:
      # Mount for influxdb data directory and configuration
      - ./influxdb/data:/var/lib/influxdb2:rw
    ports:
      - "8086:8086"
    environment:
      # Use these same configurations parameters in your telegraf configuration, mytelegraf.conf.
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=mypasswordmypasswordmypassword
      - DOCKER_INFLUXDB_INIT_ORG=Libre
      - DOCKER_INFLUXDB_INIT_BUCKET=Libre
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mytokenmytokenmytoken
    container_name: influxdb
    healthcheck:
      interval: 5s
      timeout: 3s
      retries: 5
      test: ["CMD", "curl", "-f", "http://influxdb:8086"]
  packml-sim:
    image: spruiktec/packml-simulator
    restart: always
    environment:
      SITE: PACKML
      AREA: SIM
      LINE: 'LINE01'
      MQTT_URL: mqtt://mqtt:1883
      MQTT_USERNAME: admin
      MQTT_PASSWORD: public
      MQTT_CLIENT_ID: packml_sim
    mem_limit: 30MB
    depends_on:
      alpha:
        condition: service_healthy
      mqtt:
        condition: service_healthy
      influxdb:
        condition: service_healthy
  libre-gateway:
#    ports:
#      - 4000:4000
    image: ghcr.io/spruik/libre-gateway:0.1.1
    restart: always
    container_name: libre-gateway
    labels:
      - "traefik.http.routers.gateway.entrypoints=gateway"
      - "traefik.http.routers.gateway.rule=Host(`sapp00332.eu.aws.rccad.net`)"
      - "traefik.http.routers.gateway.tls=true"
      - "traefik.http.services.gateway.loadbalancer.server.port=4000"
      - "traefik.http.routers.gateway.middlewares=mw-cors"
      - "traefik.http.routers.gateway.tls.certresolver=le"
    environment:
      - GRAPHQL_ENDPOINT=http://alpha:8080
      - LIBRE_CORE_ENDPOINT=http://libre-core:4002
      - LIBRE_AUTH_CERT_URL=https://demo-libremfg.us.auth0.com/.well-known/jwks.json
    volumes:
      - type: bind
        source: ./libre-gateway/supergraph.graphql
        target: /app/supergraph.graphql
      - type: bind
        source: ./libre-gateway/supergraph.yaml
        target: /app/supergraph.yaml
    depends_on:
      alpha:
        condition: service_healthy
      mqtt:
        condition: service_healthy
      influxdb:
        condition: service_healthy
  grafana:
    image: grafana/grafana:8.2.1
    container_name: grafana
    restart: always
    environment:
      - GF_INSTALL_PLUGINS=fifemon-graphql-datasource,marcusolsson-gantt-panel,isaozler-paretochart-panel,michaeldmoore-multistat-panel
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/plugins:/var/lib/grafana/plugins
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - "mqtt"
      - "alpha"
      - "influxdb"
  dgraph-init:
    image: dgraph/dgraph:v21.12.0
    volumes:
      - ./schema:/dgraph/schema
    command: >
      sh -c "curl -X POST alpha:8080/admin/schema --data-binary '@./schema/libreSchema.sdl' &&
             dgraph live -f ./schema/g01.rdf.gz -a alpha:9080 -z zero:5080"
    container_name: dgraph-init
    depends_on:
      alpha:
          condition: service_healthy
  libre-edge-agent:
    image: ghcr.io/spruik/libre-edge-agent:0.4.0
    restart: always
    environment:
      - LIBRE_CONFIG_FILE=/etc/config/config.json
    volumes:
      - ./libre-edge-agent/config:/etc/config
    depends_on:
      alpha:
        condition: service_healthy
      mqtt:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    container_name: libre-edge-agent


